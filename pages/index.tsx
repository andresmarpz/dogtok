import type { NextPage } from 'next';
import Head from 'next/head';
import BlurImage from '../components/BlurImage';
import Layout from '../components/Layout';
import { styled } from '../stitches.config';

import { useQuery, UseQueryOptions } from 'react-query';
import { fetchDogs } from '../lib/fetch';

interface Response {
    message: string[];
    status: string;
}

interface Image {
    url: string;
}

const StyledHeader = styled('header', {
    padding: '64px 16px'
});

const StyledHr = styled('hr', {
    border: 0,
    borderTop: '1px solid $gray5',
    margin: 'auto'
});

const StyledMain = styled('main', {
    display: 'grid',
    gridTemplateColumns: 'repeat(1, minmax(0, 1fr))',
    gridGap: '8px',
    justifyItems: 'center',
    padding: '0 16px',
    maxWidth: '720px',
    margin: 'auto',
    '@sm': {
        gridTemplateColumns: 'repeat(2, minmax(0, 1fr))'
    },
    '@lg': {
        gridTemplateColumns: 'repeat(3, minmax(0, 1fr))',
        maxWidth: '1490px'
    },
    '@xl': {
        gridTemplateColumns: 'repeat(4, minmax(0, 1fr))'
    }
});

const StyledWrap = styled('span', {
    width: '100%',
    aspectRatio: '1 / 1',
    position: 'relative',
    borderRadius: 4,
    overflow: 'hidden'
});

const options: UseQueryOptions<any> = {
    refetchInterval: false,
    refetchOnReconnect: false,
    refetchOnWindowFocus: false
};

const Home: NextPage = () => {
    const { isLoading, isError, data, error } = useQuery<string[]>(
        ['dogs'],
        fetchDogs,
        options
    );

    if (isError || error) return <div>Error loading doggos.</div>;

    return (
        <Layout>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <StyledHeader>
                <b>dogtok</b>
            </StyledHeader>

            <StyledHr
                css={{
                    marginY: 24
                }}
            />
            <StyledMain>
                {isLoading || !data ? (
                    <div>Loading doggos...</div>
                ) : (
                    data.map((url, index: number) => (
                        <StyledWrap key={'d' + index}>
                            <BlurImage
                                src={url}
                                layout="fill"
                                objectFit="cover"
                            />
                        </StyledWrap>
                    ))
                )}
            </StyledMain>
        </Layout>
    );
};

export default Home;
